// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cReg_WebApp.Models.context;

namespace cReg_WebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200229093724_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b396b113-c194-48b1-b15f-2d7f9bf33a03",
                            ConcurrencyStamp = "32e9f3b4-6e42-4d6e-8c71-4bcb3ec3c2da",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "8a549b28-c5ba-4097-a095-301ae1e2efbb",
                            ConcurrencyStamp = "05843e40-1f46-4d28-aa7f-c043ab85b21e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ec83678c-819d-433b-97f3-608abb81c533",
                            RoleId = "b396b113-c194-48b1-b15f-2d7f9bf33a03"
                        },
                        new
                        {
                            UserId = "d9ecc188-2264-46d5-bacb-0f764b12ff7f",
                            RoleId = "b396b113-c194-48b1-b15f-2d7f9bf33a03"
                        },
                        new
                        {
                            UserId = "10d18835-e05b-480f-9693-ed39d15dd06e",
                            RoleId = "b396b113-c194-48b1-b15f-2d7f9bf33a03"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("courseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("creditHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("space")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            courseId = 1,
                            courseDescription = "Database Implementation",
                            courseName = "COMP 4380",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 80
                        },
                        new
                        {
                            courseId = 2,
                            courseDescription = "Software Engineering",
                            courseName = "COMP 4350",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 80
                        },
                        new
                        {
                            courseId = 3,
                            courseDescription = "Computer Graphics",
                            courseName = "COMP 4490",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 80
                        },
                        new
                        {
                            courseId = 4,
                            courseDescription = "Machine Learning",
                            courseName = "COMP 4360",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 80
                        });
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Enrolled", b =>
                {
                    b.Property<int>("enrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("completed")
                        .HasColumnType("bit");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int?>("grade")
                        .HasColumnType("int");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("enrollId");

                    b.HasIndex("courseId");

                    b.HasIndex("studentId");

                    b.ToTable("Enrolled");

                    b.HasData(
                        new
                        {
                            enrollId = 1,
                            comment = "",
                            completed = false,
                            courseId = 1,
                            grade = -1,
                            rating = -1,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 2,
                            comment = "Very good",
                            completed = true,
                            courseId = 2,
                            grade = 80,
                            rating = 80,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 3,
                            comment = "",
                            completed = false,
                            courseId = 1,
                            grade = -1,
                            rating = -1,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 4,
                            comment = "",
                            completed = true,
                            courseId = 3,
                            grade = 50,
                            rating = -1,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 5,
                            comment = "",
                            completed = false,
                            courseId = 2,
                            grade = -1,
                            rating = -1,
                            studentId = 3
                        },
                        new
                        {
                            enrollId = 6,
                            comment = "Excellent",
                            completed = true,
                            courseId = 4,
                            grade = 70,
                            rating = 90,
                            studentId = 3
                        });
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Faculty", b =>
                {
                    b.Property<int>("facultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("facultyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("facultyId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            facultyId = 1,
                            facultyName = "Computer Science"
                        },
                        new
                        {
                            facultyId = 2,
                            facultyName = "Engineering"
                        },
                        new
                        {
                            facultyId = 3,
                            facultyName = "Arts"
                        });
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Prerequisite", b =>
                {
                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("prerequisiteId")
                        .HasColumnType("int");

                    b.Property<int>("grade")
                        .HasColumnType("int");

                    b.HasKey("courseId", "prerequisiteId");

                    b.HasIndex("prerequisiteId");

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Required", b =>
                {
                    b.Property<int>("facultyId")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.HasKey("facultyId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("Required");
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("majorId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("studentId");

                    b.HasIndex("majorId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            majorId = 1,
                            name = "John Braico"
                        },
                        new
                        {
                            studentId = 2,
                            majorId = 2,
                            name = "Mike Zapp"
                        },
                        new
                        {
                            studentId = 3,
                            majorId = 3,
                            name = "Peter Graham"
                        });
                });

            modelBuilder.Entity("cReg_WebApp.Models.StudentUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("StudentUser");

                    b.HasData(
                        new
                        {
                            Id = "ec83678c-819d-433b-97f3-608abb81c533",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9933ac73-4054-4c5e-8671-38c5801cf50e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JB",
                            PasswordHash = "AQAAAAEAACcQAAAAELE0o15PniuynlGJs1846uUlfoybSOxz3H3tjQG8VI7JyoGihPRio9oRtcHea7Damg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01d8a83a-ae41-44f7-8abb-6fcc85549970",
                            TwoFactorEnabled = false,
                            UserName = "jb",
                            StudentId = 1
                        },
                        new
                        {
                            Id = "d9ecc188-2264-46d5-bacb-0f764b12ff7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a936baa-f80d-4553-a222-d3bf9811dca2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkbP/vx5GVyW6K+I7pK9s1E7L83BFEsszSz6dD8I9UceiceXeObNV432RszctB3OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a210d01b-3035-4f38-8081-137430c80783",
                            TwoFactorEnabled = false,
                            UserName = "mz",
                            StudentId = 2
                        },
                        new
                        {
                            Id = "10d18835-e05b-480f-9693-ed39d15dd06e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fcd049a-48dd-4b67-9048-985073d864d6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMltYp6VY0+92ROhcZGmGBNF8Kw6xZ/rCoUWdRRyjhWjUilo+uy3BUcAItnCVLbwQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d1db9ed-2f0f-4cc2-bc99-8ad37674bd91",
                            TwoFactorEnabled = false,
                            UserName = "pg",
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Enrolled", b =>
                {
                    b.HasOne("cReg_WebApp.Models.entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cReg_WebApp.Models.entities.Student", "student")
                        .WithMany("enrolledCourses")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Prerequisite", b =>
                {
                    b.HasOne("cReg_WebApp.Models.entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cReg_WebApp.Models.entities.Course", "prerequisite")
                        .WithMany()
                        .HasForeignKey("prerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Required", b =>
                {
                    b.HasOne("cReg_WebApp.Models.entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cReg_WebApp.Models.entities.Faculty", "faculty")
                        .WithMany()
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cReg_WebApp.Models.entities.Student", b =>
                {
                    b.HasOne("cReg_WebApp.Models.entities.Faculty", "major")
                        .WithMany()
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cReg_WebApp.Models.StudentUser", b =>
                {
                    b.HasOne("cReg_WebApp.Models.entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
