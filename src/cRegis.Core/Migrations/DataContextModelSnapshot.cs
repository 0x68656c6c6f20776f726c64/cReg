// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cRegis.Core.Data;

namespace cRegis.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069",
                            ConcurrencyStamp = "c26bb11f-61f0-4f0b-9032-8d1977311ce2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "b545255c-06d9-4d1a-bfa7-d3ca70141aa3",
                            ConcurrencyStamp = "55667c9f-71e5-4060-8a0a-251bbe078920",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "239169a9-6e91-402f-a58d-c66b197746ba",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        },
                        new
                        {
                            UserId = "5523ef70-d7f2-4a5c-96b1-8ae3be755e1e",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        },
                        new
                        {
                            UserId = "11513756-7d27-4021-82e4-c8f2b955db82",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        },
                        new
                        {
                            UserId = "d9057943-716a-49f8-866f-6f108287bccd",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        },
                        new
                        {
                            UserId = "6d914662-574b-4a4d-99ff-b0606c7168dd",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        },
                        new
                        {
                            UserId = "bc8689d6-d63a-48d7-a18b-b72e452bc805",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        },
                        new
                        {
                            UserId = "76fa619a-4d8a-404f-8be1-9568f61f3dae",
                            RoleId = "14b5ba51-3d2f-41ae-ac3f-aa596f89f069"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("cRegis.Core.Entities.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("courseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("creditHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("space")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            courseId = 1,
                            courseDescription = "An Introduction to Computer Science 1",
                            courseName = "COMP 1010",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 2,
                            courseDescription = "An Introduction to Computer Science 2",
                            courseName = "COMP 1020",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 3,
                            courseDescription = "Data Structure and Algorithm",
                            courseName = "COMP 2140",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 4,
                            courseDescription = "Program Practice",
                            courseName = "COMP 2160",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 5,
                            courseDescription = "Analysis of Algorithms",
                            courseName = "COMP 2080",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 6,
                            courseDescription = "Introduction to Computer Systems",
                            courseName = "COMP 2280",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 7,
                            courseDescription = "Object Orientation",
                            courseName = "COMP 2150",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 8,
                            courseDescription = "Graphics 1",
                            courseName = "COMP 3490",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 9,
                            courseDescription = "Software Engineer 1",
                            courseName = "COMP 3350",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 10,
                            courseDescription = "Analysis of Algorithms and Data Structures",
                            courseName = "COMP 3170",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 11,
                            courseDescription = "Operating Systems",
                            courseName = "COMP 3430",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 12,
                            courseDescription = "Computer Organization",
                            courseName = "COMP 3370",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 13,
                            courseDescription = "Artificial Intelligence 1",
                            courseName = "COMP 3190",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 14,
                            courseDescription = "Databases Concepts and Usage",
                            courseName = "COMP 3380",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 15,
                            courseDescription = "Computer Graphics",
                            courseName = "COMP 4490",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 16,
                            courseDescription = "Software Engineer 2",
                            courseName = "COMP 4350",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 17,
                            courseDescription = "Professional Practice in Computer Science",
                            courseName = "COMP 4620",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 18,
                            courseDescription = "Machine Learning",
                            courseName = "COMP 4360",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 19,
                            courseDescription = "Database Implementation",
                            courseName = "COMP 4380",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 20,
                            courseDescription = "Calculus 2",
                            courseName = "MATH 1700",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 21,
                            courseDescription = "Basic Statistical Analysis 1",
                            courseName = "STAT 1000",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 22,
                            courseDescription = "Introduction to Calculus",
                            courseName = "MATH 1500",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 23,
                            courseDescription = "Basic Statistical Analysis 2",
                            courseName = "STAT 2000",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 24,
                            courseDescription = "Introduction to Microeconomic Principles",
                            courseName = "ECON 1010",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 25,
                            courseDescription = "Introduction to Macroeconomic Principles",
                            courseName = "ECON 1020",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        },
                        new
                        {
                            courseId = 26,
                            courseDescription = "An Introduction to Modern World History: 1800 - Present(M)",
                            courseName = "HIST 1380",
                            creditHours = 3,
                            date = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            space = 5
                        });
                });

            modelBuilder.Entity("cRegis.Core.Entities.Enrolled", b =>
                {
                    b.Property<int>("enrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("completed")
                        .HasColumnType("bit");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int?>("grade")
                        .HasColumnType("int");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.HasKey("enrollId");

                    b.HasIndex("courseId");

                    b.HasIndex("studentId");

                    b.ToTable("Enrolled");

                    b.HasData(
                        new
                        {
                            enrollId = 1,
                            comment = "I like that course",
                            completed = true,
                            courseId = 1,
                            grade = 80,
                            rating = 90,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 2,
                            comment = "Very good",
                            completed = true,
                            courseId = 2,
                            grade = 90,
                            rating = 80,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 3,
                            comment = "Very interesting prof. Does a good job breaking down ideas into chunks you can easily understand",
                            completed = true,
                            courseId = 3,
                            grade = 95,
                            rating = 75,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 4,
                            comment = "I like the instructor",
                            completed = true,
                            courseId = 4,
                            grade = 95,
                            rating = 76,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 5,
                            comment = "Very good",
                            completed = true,
                            courseId = 5,
                            grade = 85,
                            rating = 82,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 6,
                            comment = "Franklin cannot take this one",
                            completed = true,
                            courseId = 6,
                            grade = 90,
                            rating = 87,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 7,
                            comment = "Excellent",
                            completed = true,
                            courseId = 7,
                            grade = 98,
                            rating = 93,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 8,
                            comment = "Good instructor",
                            completed = true,
                            courseId = 8,
                            grade = 97,
                            rating = 80,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 9,
                            completed = true,
                            courseId = 9,
                            grade = 96,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 10,
                            completed = true,
                            courseId = 11,
                            grade = 92,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 11,
                            completed = true,
                            courseId = 15,
                            grade = 87,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 12,
                            completed = true,
                            courseId = 14,
                            grade = 88,
                            studentId = 1
                        },
                        new
                        {
                            enrollId = 13,
                            comment = "NEVER AGAIN",
                            completed = true,
                            courseId = 1,
                            grade = 70,
                            rating = 70,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 14,
                            comment = "You will either love the course or hate time",
                            completed = true,
                            courseId = 2,
                            grade = 73,
                            rating = 80,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 15,
                            comment = "Awesome",
                            completed = true,
                            courseId = 3,
                            grade = 85,
                            rating = 90,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 16,
                            comment = "Very good professor, the best one I've had withery good professor, the best one I've had with",
                            completed = true,
                            courseId = 4,
                            grade = 75,
                            rating = 60,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 17,
                            comment = "The course thinks that everyone learns the same way (auditory). ",
                            completed = true,
                            courseId = 7,
                            grade = 70,
                            rating = 40,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 18,
                            comment = "Hard grader",
                            completed = true,
                            courseId = 8,
                            grade = 50,
                            rating = 20,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 19,
                            comment = "Nice Instructor",
                            completed = true,
                            courseId = 9,
                            grade = 68,
                            rating = 10,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 20,
                            completed = true,
                            courseId = 10,
                            grade = 65,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 21,
                            completed = true,
                            courseId = 13,
                            grade = 65,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 22,
                            completed = true,
                            courseId = 14,
                            grade = 50,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 23,
                            completed = false,
                            courseId = 6,
                            studentId = 2
                        },
                        new
                        {
                            enrollId = 24,
                            comment = "Very excellent professor. Very clear, informative, and very helpful. He knows his stuff very well! Can manage to balance his two positions in the Faculty of Science and Computer Science very well.",
                            completed = true,
                            courseId = 1,
                            grade = 90,
                            rating = 87,
                            studentId = 3
                        },
                        new
                        {
                            enrollId = 25,
                            comment = "Markers marks unnecessarily harsh. Like his intention is to fail you not to grade you. Nevertheless, he does do his best, and he is better than many.",
                            completed = true,
                            courseId = 2,
                            grade = 70,
                            rating = 90,
                            studentId = 3
                        },
                        new
                        {
                            enrollId = 26,
                            completed = true,
                            courseId = 3,
                            grade = 80,
                            studentId = 3
                        },
                        new
                        {
                            enrollId = 27,
                            completed = true,
                            courseId = 4,
                            grade = 70,
                            studentId = 3
                        },
                        new
                        {
                            enrollId = 28,
                            completed = false,
                            courseId = 6,
                            studentId = 3
                        },
                        new
                        {
                            enrollId = 29,
                            comment = "Excellent course",
                            completed = true,
                            courseId = 1,
                            grade = 90,
                            rating = 87,
                            studentId = 4
                        },
                        new
                        {
                            enrollId = 30,
                            comment = "Lectures were super easy to understand.",
                            completed = true,
                            courseId = 2,
                            grade = 80,
                            rating = 90,
                            studentId = 4
                        },
                        new
                        {
                            enrollId = 31,
                            completed = true,
                            courseId = 3,
                            grade = 90,
                            studentId = 4
                        },
                        new
                        {
                            enrollId = 32,
                            completed = true,
                            courseId = 4,
                            grade = 75,
                            studentId = 4
                        },
                        new
                        {
                            enrollId = 33,
                            completed = false,
                            courseId = 6,
                            studentId = 4
                        },
                        new
                        {
                            enrollId = 34,
                            comment = "Boring lectures. Easy mid term, harder final-assignments took a lot of time. ",
                            completed = true,
                            courseId = 1,
                            grade = 72,
                            rating = 58,
                            studentId = 5
                        },
                        new
                        {
                            enrollId = 35,
                            comment = "Don't bother going to the lectures.",
                            completed = true,
                            courseId = 2,
                            grade = 85,
                            rating = 68,
                            studentId = 5
                        },
                        new
                        {
                            enrollId = 36,
                            completed = true,
                            courseId = 3,
                            grade = 90,
                            studentId = 5
                        },
                        new
                        {
                            enrollId = 37,
                            completed = true,
                            courseId = 4,
                            grade = 75,
                            studentId = 5
                        },
                        new
                        {
                            enrollId = 38,
                            completed = false,
                            courseId = 6,
                            studentId = 5
                        },
                        new
                        {
                            enrollId = 39,
                            comment = "The course is knowledgeable and well prepared.",
                            completed = true,
                            courseId = 1,
                            grade = 98,
                            rating = 85,
                            studentId = 6
                        },
                        new
                        {
                            enrollId = 40,
                            comment = "I enjoyed this class, as I usually do.",
                            completed = true,
                            courseId = 2,
                            grade = 97,
                            rating = 98,
                            studentId = 6
                        },
                        new
                        {
                            enrollId = 41,
                            completed = true,
                            courseId = 3,
                            grade = 98,
                            studentId = 6
                        },
                        new
                        {
                            enrollId = 42,
                            completed = true,
                            courseId = 4,
                            grade = 88,
                            studentId = 6
                        },
                        new
                        {
                            enrollId = 43,
                            completed = false,
                            courseId = 6,
                            studentId = 6
                        },
                        new
                        {
                            enrollId = 44,
                            comment = "Notes aren't good for studying.",
                            completed = true,
                            courseId = 1,
                            grade = 75,
                            rating = 68,
                            studentId = 7
                        },
                        new
                        {
                            enrollId = 45,
                            comment = "Semi-entertaining lectures. Interesting fun guy to talk to but thinks a midterm average of apx. 60% is normal and fine.",
                            completed = true,
                            courseId = 2,
                            grade = 68,
                            rating = 67,
                            studentId = 7
                        },
                        new
                        {
                            enrollId = 46,
                            completed = true,
                            courseId = 3,
                            grade = 74,
                            studentId = 7
                        },
                        new
                        {
                            enrollId = 47,
                            completed = true,
                            courseId = 4,
                            grade = 72,
                            studentId = 7
                        });
                });

            modelBuilder.Entity("cRegis.Core.Entities.Faculty", b =>
                {
                    b.Property<int>("facultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("facultyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("graduateCreditHours")
                        .HasColumnType("int");

                    b.HasKey("facultyId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            facultyId = 1,
                            facultyName = "Computer Science",
                            graduateCreditHours = 60
                        });
                });

            modelBuilder.Entity("cRegis.Core.Entities.Prerequisite", b =>
                {
                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("prerequisiteId")
                        .HasColumnType("int");

                    b.Property<int>("grade")
                        .HasColumnType("int");

                    b.HasKey("courseId", "prerequisiteId");

                    b.HasIndex("prerequisiteId");

                    b.ToTable("Prerequisites");

                    b.HasData(
                        new
                        {
                            courseId = 2,
                            prerequisiteId = 1,
                            grade = 60
                        },
                        new
                        {
                            courseId = 3,
                            prerequisiteId = 2,
                            grade = 60
                        },
                        new
                        {
                            courseId = 4,
                            prerequisiteId = 2,
                            grade = 60
                        },
                        new
                        {
                            courseId = 5,
                            prerequisiteId = 3,
                            grade = 60
                        },
                        new
                        {
                            courseId = 6,
                            prerequisiteId = 3,
                            grade = 60
                        },
                        new
                        {
                            courseId = 6,
                            prerequisiteId = 4,
                            grade = 60
                        },
                        new
                        {
                            courseId = 7,
                            prerequisiteId = 3,
                            grade = 60
                        },
                        new
                        {
                            courseId = 8,
                            prerequisiteId = 3,
                            grade = 60
                        },
                        new
                        {
                            courseId = 9,
                            prerequisiteId = 7,
                            grade = 60
                        },
                        new
                        {
                            courseId = 10,
                            prerequisiteId = 3,
                            grade = 70
                        },
                        new
                        {
                            courseId = 11,
                            prerequisiteId = 6,
                            grade = 60
                        },
                        new
                        {
                            courseId = 11,
                            prerequisiteId = 4,
                            grade = 60
                        },
                        new
                        {
                            courseId = 12,
                            prerequisiteId = 6,
                            grade = 60
                        },
                        new
                        {
                            courseId = 13,
                            prerequisiteId = 3,
                            grade = 60
                        },
                        new
                        {
                            courseId = 14,
                            prerequisiteId = 3,
                            grade = 60
                        },
                        new
                        {
                            courseId = 15,
                            prerequisiteId = 8,
                            grade = 60
                        },
                        new
                        {
                            courseId = 16,
                            prerequisiteId = 9,
                            grade = 60
                        },
                        new
                        {
                            courseId = 17,
                            prerequisiteId = 9,
                            grade = 60
                        },
                        new
                        {
                            courseId = 18,
                            prerequisiteId = 10,
                            grade = 60
                        },
                        new
                        {
                            courseId = 18,
                            prerequisiteId = 13,
                            grade = 70
                        },
                        new
                        {
                            courseId = 19,
                            prerequisiteId = 11,
                            grade = 60
                        },
                        new
                        {
                            courseId = 19,
                            prerequisiteId = 14,
                            grade = 60
                        });
                });

            modelBuilder.Entity("cRegis.Core.Entities.Required", b =>
                {
                    b.Property<int>("facultyId")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.HasKey("facultyId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("Required");

                    b.HasData(
                        new
                        {
                            facultyId = 1,
                            courseId = 1
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 2
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 3
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 4
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 5
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 6
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 7
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 11
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 12
                        },
                        new
                        {
                            facultyId = 1,
                            courseId = 17
                        });
                });

            modelBuilder.Entity("cRegis.Core.Entities.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("majorId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("studentId");

                    b.HasIndex("majorId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            majorId = 1,
                            name = "John Braico"
                        },
                        new
                        {
                            studentId = 2,
                            majorId = 1,
                            name = "Mike Zapp"
                        },
                        new
                        {
                            studentId = 3,
                            majorId = 1,
                            name = "Peter Graham"
                        },
                        new
                        {
                            studentId = 4,
                            majorId = 1,
                            name = "Robert Guderian"
                        },
                        new
                        {
                            studentId = 5,
                            majorId = 1,
                            name = "Gord Boyer"
                        },
                        new
                        {
                            studentId = 6,
                            majorId = 1,
                            name = "Carson Leung"
                        },
                        new
                        {
                            studentId = 7,
                            majorId = 1,
                            name = "Franklin Bristow"
                        });
                });

            modelBuilder.Entity("cRegis.Core.Entities.Wishlist", b =>
                {
                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.HasKey("studentId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("Wishlist");

                    b.HasData(
                        new
                        {
                            studentId = 1,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 1,
                            courseId = 2,
                            priority = 2
                        },
                        new
                        {
                            studentId = 1,
                            courseId = 3,
                            priority = 3
                        },
                        new
                        {
                            studentId = 2,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 2,
                            courseId = 2,
                            priority = 2
                        },
                        new
                        {
                            studentId = 3,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 3,
                            courseId = 2,
                            priority = 2
                        },
                        new
                        {
                            studentId = 4,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 4,
                            courseId = 2,
                            priority = 2
                        },
                        new
                        {
                            studentId = 5,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 6,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 7,
                            courseId = 1,
                            priority = 1
                        },
                        new
                        {
                            studentId = 7,
                            courseId = 2,
                            priority = 2
                        });
                });

            modelBuilder.Entity("cRegis.Core.Identities.StudentUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("StudentUser");

                    b.HasData(
                        new
                        {
                            Id = "239169a9-6e91-402f-a58d-c66b197746ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ecb7007-2bb1-4cd6-8e87-77df1658a16e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JB",
                            PasswordHash = "AQAAAAEAACcQAAAAEFjU+693yaK2rfU99phoNnS+PtksFEBDSHnEGgRCwWcBx9u/RpkY/i9xr/Yv/Y7Y5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72d3ce75-a1d7-4a23-a432-d1f2eea6bc04",
                            TwoFactorEnabled = false,
                            UserName = "jb",
                            StudentId = 1
                        },
                        new
                        {
                            Id = "5523ef70-d7f2-4a5c-96b1-8ae3be755e1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3001d722-3014-4cd9-a863-c90487a0a33e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEAM3sFDMhAmxUzGkNH6adr5dPX0RLURAMSuwJo1czU5cmalljj2wjPwymqHESKBSsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ead21293-bbbb-4d80-b54b-ea1e40d31222",
                            TwoFactorEnabled = false,
                            UserName = "mz",
                            StudentId = 2
                        },
                        new
                        {
                            Id = "11513756-7d27-4021-82e4-c8f2b955db82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ed711c5-130a-4c68-8979-02e249b14632",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PG",
                            PasswordHash = "AQAAAAEAACcQAAAAEGK44156L+vHe4vEqZ/U/zr/md+pUBR/I2kdVw8dFBBqVRFBmoJbgV+b5S0JrAxqLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f103ab7-cfc6-4f56-88d2-df51183fc9a2",
                            TwoFactorEnabled = false,
                            UserName = "pg",
                            StudentId = 3
                        },
                        new
                        {
                            Id = "d9057943-716a-49f8-866f-6f108287bccd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f51edb03-e830-4608-b994-d3d024783ae9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "RG",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGimJXuaF3Rxzn/1BPmoPjCFgBPMu2JKOIizwe1znrI2DYCpgWmhI1BzsjaQH6JHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2a114a1-0129-4fd9-8e9f-31d3a0673e09",
                            TwoFactorEnabled = false,
                            UserName = "rg",
                            StudentId = 4
                        },
                        new
                        {
                            Id = "6d914662-574b-4a4d-99ff-b0606c7168dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0928eba-98f2-43f8-b00c-05ca8903bbe2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "GB",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxg2MxAzNNEy6xYezi9U1zsWpbmTaFPBc0BiYcYLcNc4Fzj145CqfvDOFXY3oGhYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eef46a1f-cae1-4eab-8661-5f51dfc29571",
                            TwoFactorEnabled = false,
                            UserName = "gb",
                            StudentId = 5
                        },
                        new
                        {
                            Id = "bc8689d6-d63a-48d7-a18b-b72e452bc805",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0c29419-3fe8-4412-a69c-5d4c656cf5c9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJNVTpbdsWSAQooekG2iaWlroOyBlPxggA7f48hvy650fYGKDhw/R98m24MW1WgXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43d6d488-da74-478a-b15b-347a88ecb321",
                            TwoFactorEnabled = false,
                            UserName = "cl",
                            StudentId = 6
                        },
                        new
                        {
                            Id = "76fa619a-4d8a-404f-8be1-9568f61f3dae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53921a24-fe63-4999-81c2-dca578fca7d6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FB",
                            PasswordHash = "AQAAAAEAACcQAAAAECn/vy5404DjtetILknd1Y02hk/HDk8za3XeixkUk+d3VUcTa6Zn1quYoeK/m8PPCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb7e1e62-378d-4627-ad73-22a8cfa91bdb",
                            TwoFactorEnabled = false,
                            UserName = "fb",
                            StudentId = 7
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cRegis.Core.Entities.Enrolled", b =>
                {
                    b.HasOne("cRegis.Core.Entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cRegis.Core.Entities.Student", "student")
                        .WithMany("enrolledCourses")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cRegis.Core.Entities.Prerequisite", b =>
                {
                    b.HasOne("cRegis.Core.Entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cRegis.Core.Entities.Course", "prerequisite")
                        .WithMany()
                        .HasForeignKey("prerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cRegis.Core.Entities.Required", b =>
                {
                    b.HasOne("cRegis.Core.Entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cRegis.Core.Entities.Faculty", "faculty")
                        .WithMany()
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cRegis.Core.Entities.Student", b =>
                {
                    b.HasOne("cRegis.Core.Entities.Faculty", "major")
                        .WithMany()
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cRegis.Core.Entities.Wishlist", b =>
                {
                    b.HasOne("cRegis.Core.Entities.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cRegis.Core.Entities.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cRegis.Core.Identities.StudentUser", b =>
                {
                    b.HasOne("cRegis.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
